/*
 formBuilder - git@github.com:kevinchappell/formBuilder.git
 Version: 1.4.0
 Author: Kevin Chappell <kevin.b.chappell@gmail.com>
 */
"use strict";
!function (e) {
    var t = function (t, l) {
        var a, s, i = {
            disableFields: {},
            defaultFields: [],
            roles: {1: "Administrator"},
            showWarning: !1,
            serializePrefix: "frmb",
            messages: {
                add: "\u6dfb\u52a0\u9879\u76ee",
                allowSelect: "Allow Select",
                autocomplete: "Autocomplete",
                cannotBeEmpty: "This field cannot be empty",
                checkboxGroup: "\u591a\u9009\u6846",
                checkbox: "Checkbox",
                checkboxes: "Checkboxes",
                clearAllMessage: "\u4f60\u786e\u5b9a\u4f60\u8981\u79fb\u9664\u8fd9\u4e2a\u7ec4\u4ef6\u4e48",
                clearAll: "\u5168\u90e8\u6e05\u9664",
                close: "\u5173\u95ed",
                copy: "Copy To Clipboard",
                dateField: "Date Field",
                description: "Help Text",
                descriptionField: "Description",
                devMode: "Developer Mode",
                disableFields: "These fields cannot be moved.",
                editNames: "Edit Names",
                editorTitle: "\u8868\u683c\u7ec4\u4ef6",
                editXML: "Edit XML",
                fieldVars: "Field Variables",
                fieldRemoveWarning: "Are you sure you want to remove this field?",
                getStarted: "\u4ece\u53f3\u8fb9\u62d6\u62fd\u7ec4\u4ef6\u5230\u8fd9\u91cc",
                hide: "Edit",
                label: "\u6807\u9898",
                labelEmpty: "Field Label cannot be empty",
                limitRole: "Limit access to one or more of the following roles:",
                mandatory: "Mandatory",
                maxLength: "Max Length",
                minOptionMessage: "This field requires a minimum of 2 options",
                name: "Name",
                no: "No",
                off: "Off",
                on: "On",
                optional: "optional",
                optionLabelPlaceholder: "Label",
                optionValuePlaceholder: "Value",
                optionEmpty: "Option value required",
                paragraph: "Paragraph",
                preview: "\u9884\u89c8",
                radioGroup: "\u5355\u9009\u6846",
                radio: "Radio",
                removeMessage: "Remove Element",
                remove: "&#215;",
                required: "\u662f\u5426\u4e3a\u5fc5\u586b\u9879\u76ee",
                richText: "\u5bcc\u6587\u672c\u6846",
                roles: "Access",
                save: "Save Template",
                selectOptions: "\u9009\u9879",
                select: "Select",
                selectionsMessage: "Allow Multiple Selections",
                text: "\u6587\u672c\u6846",
                warning: "Warning!",
                viewXML: "View XML",
                yes: "Yes"
            }
        }, o = {};
        o.startMoving = function (t, l) {
            t = t, l.item.addClass("moving"), a = e("li", this).index(l.item)
        }, o.stopMoving = function (t, l) {
            t = t, l.item.removeClass("moving"), s && (e(l.sender).sortable("cancel"), e(this).sortable("cancel"))
        }, o.safename = function (e) {
            return e.replace(/\s/g, "-").replace(/[^a-zA-Z0-9\-]/g, "").toLowerCase()
        }, o.forceNumber = function (e) {
            return e.replace(/[^0-9]/g, "")
        }, o.initTooltip = function (e) {
            var t = e.find(".tooltip");
            e.mouseenter(function () {
                t.outerWidth() > 200 && t.addClass("max-width"), t.css("left", e.width() + 14), t.stop(!0, !0).fadeIn("fast")
            }).mouseleave(function () {
                e.find(".tooltip").stop(!0, !0).fadeOut("fast")
            }), t.hide()
        }, o.save = function () {
            q.children("li").not(".disabled").each(function () {
                o.updatePreview(e(this))
            }), r.val(q.toXML())
        }, o.updatePreview = function (t) {
            var l = t.attr("class");
            if (-1 === l.indexOf("ui-sortable-handle")) {
                l = l.replace(" form-field", "");
                var a, s = {type: l, label: e(".fld-label", t).val()};
                l.match(/(select|checkbox-group|radio-group)/) && (s.values = [], e(".sortable-options li", t).each(function () {
                    var t = {};
                    t.selected = e(".select-option", e(this)).is(":checked"), t.value = e(".option-value", e(this)).val(), t.label = e(".option-label", e(this)).val(), s.values.push(t)
                })), a = V(s), e(".prev-holder", t).html(a)
            }
        }, o.updateMultipleSelect = function () {
            q.delegate('input[name="multiple"]', "change", function () {
                var t = e(this).parents(".fields:eq(0)").find(".sortable-options input.select-option");
                this.checked ? t.each(function () {
                    e(this).prop("type", "checkbox")
                }) : t.each(function () {
                    e(this).removeAttr("checked").prop("type", "radio")
                })
            })
        }, o.htmlEncode = function (t) {
            return e("<div/>").text(t).html()
        }, o.htmlDecode = function (t) {
            return e("<div/>").html(t).text()
        }, o.validateForm = function () {
            var t = [];
            e('input[name="label"], input[type="text"].option', q).each(function () {
                if ("" === e(this).val()) {
                    var l = e(this).parents("li.form-field"), a = e(this);
                    t.push({field: l, error: n.messages.labelEmpty, attribute: a})
                }
            }), t.length && (alert("Error: " + t[0].error), e("html, body").animate({scrollTop: t[0].field.offset().top}, 1e3, function () {
                var l = e(".toggle-form", t[0].field).attr("id");
                e(".toggle-form", t[0].field).addClass("open").parent().next(".prev-holder").slideUp(250), e("#" + l + "-fld").slideDown(250, function () {
                    t[0].attribute.addClass("error")
                })
            }))
        }, o.disabledTT = function (t) {
            var l = t.attr("data-tooltip");
            if (l) {
                t.removeAttr("title").data("tip_text", l);
                var a = e("<p/>", {"class": "frmb-tt"}).html(l);
                t.append(a), a.css({top: -a.outerHeight(), left: -15}), t.mouseleave(function () {
                    e(this).attr("data-tooltip", t.data("tip_text")), e(".frmb-tt").remove()
                })
            }
        };
        for (var n = e.extend(i, l), r = e(t), d = "frmb-" + e("ul[id^=frmb-]").length++, c = "", p = 1, m = d + "-control-box", u = [{
            label: n.messages.text,
            attrs: {type: "text", className: "text-input", name: "text-input"}
        }, {
            label: n.messages.richText,
            attrs: {type: "rich-text", className: "rich-text", name: "rich-text"}
        }, {
            label: n.messages.radioGroup,
            attrs: {type: "radio-group", className: "radio-group", name: "radio-group"}
        }, {
            label: n.messages.checkboxGroup,
            attrs: {type: "checkbox-group", className: "checkbox-group", name: "checkbox-group"}
        }], f = e("<ul/>", {id: m, "class": "frmb-control"}), h = u.length - 1; h >= 0; h--) {
            var v = e("<li/>", {
                "class": "icon-" + u[h].attrs.className,
                type: u[h].type,
                name: u[h].className,
                label: u[h].label
            });
            for (var g in u[h])u[h].hasOwnProperty(g) && v.data(g, u[h][g]);
            v.html(u[h].label).appendTo(f)
        }
        var b = e("<h4/>").html(n.messages.editorTitle), x = e("<h4/>").html(n.messages.preview), y = e("<a/>", {
        }), k = e("<a/>", {
            id: d + "-allow-select",
            text: n.messages.allowSelect,
            href: "#",
            "class": "allow-select"
        }).prop("checked", "checked"), w = e("<a/>", {
            id: d + "-edit-xml",
            text: n.messages.editXML,
            href: "#",
            "class": "edit-xml"
        }), C = e("<a/>", {
            id: d + "-edit-names",
            text: n.messages.editNames,
            href: "#",
            "class": "edit-names"
        }), T = e("<a/>", {
            id: d + "-clear-all",
            text: n.messages.clearAll,
            href: "#",
            "class": "clear-all"
        }), _ = e("<div/>", {
            id: d + "-save",
            href: "#",
            "class": "save-btn-wrap",
            title: n.messages.save
        }).html(), M = e("<div/>", {
            id: d + "-action-links-inner",
            "class": "action-links-inner"
        }).append(w, " | ", C, " | ", k, " | ", T, " |&nbsp;"), E = e("<span/>", {"class": "dev-mode-link"}).html(n.messages.devMode + " " + n.messages.off), N = e("<div/>", {
            id: d + "-action-links",
            "class": "action-links"
        }).append(M, E), q = e("<ul/>").attr("id", d).addClass("frmb").sortable({
            cursor: "move",
            opacity: .9,
            beforeStop: function (t, l) {
                var a = e("> li", q).length - 1, i = l.placeholder.index();
                s = 1 >= i || i === a
            },
            start: o.startMoving,
            stop: o.stopMoving,
            cancel: "input, .disabled, .sortable-options, .add, .btn, .no-drag",
            receive: function (e, t) {
            },
            placeholder: "frmb-placeholder"
        });
        f.sortable({
            helper: "clone",
            opacity: .9,
            connectWith: q,
            cursor: "move",
            placeholder: "ui-state-highlight",
            start: o.startMoving,
            stop: o.stopMoving,
            revert: 150,
            change: function (e, t) {
            },
            remove: function (t, l) {
                0 === a ? f.prepend(l.item) : e("li:nth-child(" + a + ")", f).after(l.item)
            },
            beforeStop: function (t, l) {
                var a = e("> li", q).length - 1, i = l.placeholder.index();
                s = 1 >= i || i === a ? !0 : !1, l.placeholder.parent().hasClass("frmb-control") && (s = !0)
            },
            update: function (t, l) {
                r.stopIndex = 0 === e("li", q).index(l.item) ? "0" : e("li", q).index(l.item), e("li", q).index(l.item) < 0 ? e(this).sortable("cancel") : A(e(l.item[0]), !0)
            },
            receive: function (t, l) {
                (l.sender.hasClass("frmb") || l.sender.hasClass("frmb-control")) && e(l.sender).sortable("cancel")
            }
        }), r.before(q).parent().prepend(x).addClass("frmb-wrap").append(N, y, _);
        var F = e("<div/>", {
            id: d + "-cb-wrap",
            "class": "cb-wrap"
        }).append(b, f), L = e(".frmb-wrap").before(F).append(N), D = function () {
            if (0 === e(this).parents("li.disabled").length) {
                if ("label" === e(this).name && "" === e(this).val())return alert("Error: " + n.messages.labelEmpty);
                o.save()
            }
        };
        e("input, select", q).on("change", D), e("input, select", q).on("blur", D), r.getTemplate = function () {
            var t = "" !== r.val() ? e.parseXML(r.val()) : !1, l = e(t).find("field");
            if (l.length > 0)l.each(function () {
                A(e(this))
            }); else if (!t) {
                if (n.defaultFields.length)for (var a = n.defaultFields.length - 1; a >= 0; a--)X(n.defaultFields[a]); else L.addClass("empty").attr("data-content", n.messages.getStarted);
                I()
            }
        };
        var I = function () {
            var t = '<li class="disabled __POSITION__">__CONTENT__</li>';
            n.disableFields.before && !e(".disabled.before", q).length && q.prepend(t.replace("__POSITION__", "before").replace("__CONTENT__", n.disableFields.before)), n.disableFields.after && !e(".disabled.after", q).length && q.append(t.replace("__POSITION__", "after").replace("__CONTENT__", n.disableFields.after))
        }, O = function (e) {
            var t = (new Date).getTime();
            return e.data("attrs").name + "-" + t
        }, A = function (t, l) {
            l = l || !1;
            var a = t.data("attrs") || {}, s = a.type || t.attr("type"), i = s.match(/(select|checkbox-group|radio-group)/), n = {};
            n.label = o.htmlEncode(t.attr("label")), n.name = l ? O(t) : a.name || t.attr("name"), n.role = t.attr("role"), n.required = t.attr("required"), n.maxLength = t.attr("max-length"), n.type = s, n.description = void 0 !== t.attr("description") ? o.htmlEncode(t.attr("description")) : "", i && (n.multiple = !0, n.values = [], t.children().each(function (l) {
                var a = {
                    label: e(this).text(),
                    value: e(this).attr("value"),
                    selected: t.attr("default") === l ? !0 : !1
                };
                n.values.push(a)
            })), X(n), L.removeClass("empty"), I()
        }, S = function (e) {
            G(n.messages.text, W(e), e)
        }, B = function (e) {
            G(n.messages.richText, W(e), e)
        }, P = function (e) {
            G(n.messages.checkbox, W(e), e)
        }, R = function (t) {
            t.values && t.values.length || (t.values = [{
                selected: "false",
                label: "Option 1",
                value: "option-1"
            }, {selected: "false", label: "Option 2", value: "option-2"}]);
            var l = "", a = o.safename(t.name), s = ("checkbox-group" === t.type, "none");
            for (l += W(t), l += '<div class="false-label">' + n.messages.selectOptions + "</div>", l += '<div class="fields">', l += '<div class="allow-multi" style="display:' + s + '">', l += '<input type="checkbox" id="multiple_' + p + '" name="multiple"' + (t.multiple ? 'checked="checked"' : "") + ">", l += '<label class="multiple" for="multiple_' + p + '">' + n.messages.selectionsMessage + "</label>", l += "</div>", l += '<ol class="sortable-options">', h = 0; h < t.values.length; h++)l += j(t.values[h], a, t.values[h].selected, t.multiple);
            l += "</ol>", l += '<div class="field_actions"><a href="#" class="add add_opt"><strong>' + n.messages.add + '</strong></a> | <a href="#" class="close_field">' + n.messages.close + "</a></div>", l += "</div>", G(n.messages.select, l, t), e(".sortable-options").sortable()
        }, X = function (e) {
            void 0 === e && (e = "");
            var t = {
                2: S,
                date: S,
                autocomplete: S,
                checkbox: P,
                select: R,
                "rich-text": B,
                textarea: B,
                "radio-group": R,
                "checkbox-group": R,
                text: S
            };
            "function" == typeof t[e.type] && t[e.type](e)
        }, W = function Q(t) {
            var l, Q = "", a = void 0 !== t.role ? t.role.split(",") : [], s = e("<div>", {"class": "frm-fld label-wrap"});
            e("<label/>").html(n.messages.label + " *").appendTo(s), e("<input>", {
                type: "text",
                name: "label",
                value: t.label,
                "class": "fld-label"
            }).appendTo(s), Q += s[0].outerHTML;
            var i = e("<div>", {"class": "frm-fld description-wrap"});
            e("<label/>").html(n.messages.description + " *").appendTo(i),  Q += '<div style="display: none" class="frm-fld access-wrap"><label>' + n.messages.roles + "</label>", Q += '<input type="checkbox" name="enable_roles" value="" ' + (void 0 !== t.role ? "checked" : "") + ' id="enable_roles-' + p + '"/> <label for="enable_roles-' + p + '" class="roles_label">' + n.messages.limitRole + "</label>", Q += '<div class="frm-fld available-roles" ' + (void 0 !== t.role ? 'style="display:block"' : "") + ">";
            for (l in n.roles)-1 === e.inArray(l, ["date", "4"]) && (Q += '<input type="checkbox" name="roles[]" value="' + l + '" id="fld-' + p + "-roles-" + l + '" ' + (-1 !== e.inArray(l, a) ? "checked" : "") + ' class="roles-field" /><label for="fld-' + p + "-roles-" + l + '">' + n.roles[l] + "</label><br/>");
            return Q += "</div></div>", e.inArray(t.type, ["checkbox", "select", "checkbox-group", "date", "autocomplete", "radio-group"]) < 0 && (Q += ''), Q
        }, G = function (t, l, a) {
            var s = "" !== e(l).find('input[name="label"]').val() ? e(l).find('input[name="label"]').val() : t, i = "", d = '<a id="del_' + p + '" class="del-button btn delete-confirm" href="#" title="' + n.messages.removeMessage + '">' + n.messages.remove + "</a>", c = '<a id="frm-' + p + '" class="toggle-form btn icon-pencil" href="#" title="' + n.messages.hide + '"></a> ', m = a.required, u = "" !== a.description ? '<span class="tooltip-element" tooltip="' + a.description + '">?</span>' : "";
            i += '<li id="frm-' + p + '-item" class="' + a.type + ' form-field">', i += '<div class="legend">', i += d, i += '<span id="txt-title-' + p + '" class="field-label">' + s + "</span>" + u + '<span class="required-asterisk" ' + ("true" === m ? 'style="display:inline"' : "") + "> *</span>" + c + "</div>", i += '<div class="prev-holder">' + V(a) + "</div>", i += '<div id="frm-' + p + '-fld" class="frm-holder">', i += '<div class="form-elements">',  i += l, i += "</div>", i += "</div>", i += "</li>", r.stopIndex ? e("li", q).eq(r.stopIndex).after(i) : q.append(i), e(document.getElementById("frm-" + p + "-item")).hide().slideDown(250), p++, o.save()
        }, V = function (e) {
            var t, l = "", a = (new Date).getTime();
            switch (e.type) {
                case"textarea":
                    l = "<" + e.type + "></" + e.type + ">";
                    break;
                case"select":
                    var s;
                    for (e.values.reverse(), t = e.values.length - 1; t >= 0; t--)s += '<option value="' + e.values[t].value + '">' + e.values[t].label + "</option>";
                    l = "<" + e.type + ' class="no-drag">' + s + "</" + e.type + ">";
                    break;
                case"checkbox-group":
                case"radio-group":
                    var i = e.type.replace("-group", "");
                    for (e.values.reverse(), t = e.values.length - 1; t >= 0; t--)l += '<div><input type="' + i + '" id="' + i + "-" + a + "-" + t + '" value="' + e.values[t].value + '" /><label for="' + i + "-" + a + "-" + t + '">' + e.values[t].label + "</label></div>";
                    break;
                case"text":
                case"password":
                case"email":
                case"date":
                case"checkbox":
                    l = '<input type="' + e.type + '" placeholder="">';
                    break;
                case"autocomplete":
                    l = '<input class="ui-autocomplete-input" autocomplete="on" placeholder="">';
                    break;
                default:
                    l = "<" + e.type + "></" + e.type + ">"
            }
            return l
        }, j = function (e, t, l, a) {
            var s = a ? "checkbox" : "radio";
            return "object" != typeof e ? e = {
                label: "",
                value: ""
            } : (e.label = e.label || "", e.value = e.value || ""), c = "<li>", c += '<input type="' + s + '" ' + l + ' class="select-option" name="' + t + '" />', c += '<input type="text" class="option-label" placeholder="' + n.messages.optionLabelPlaceholder + '" value="' + e.label + '" />', c += '<input type="text" class="option-value" placeholder="' + n.messages.optionValuePlaceholder + '" value="' + e.value + '" />', c += '<a href="#" class="remove btn" title="' + n.messages.removeMessage + '">' + n.messages.remove + "</a>", c += "</li>"
        };
        q.delegate(".remove", "click", function (t) {
            t.preventDefault();
            var l = e(this).parents(".sortable-options:eq(0)").children("li").length;
            2 >= l ? alert("Error: " + n.messages.minOptionMessage) : e(this).parent("li").slideUp("250", function () {
                e(this).remove()
            })
        }), q.on("click", ".toggle-form", function (t) {
            t.preventDefault();
            var l = e(this).attr("id");
            e(this).toggleClass("open").parent().next(".prev-holder").slideToggle(250), e(document.getElementById(l + "-fld")).slideToggle(250, function () {
                o.save()
            })
        }), q.delegate('input[name="label"]', "keyup", function () {
            e(".field-label", e(this).closest("li")).text(e(this).val())
        }), q.delegate("input.error", "keyup", function () {
            e(this).removeClass("error")
        }), q.delegate('input[name="description"]', "keyup", function () {
            var t = e(".tooltip-element", e(this).closest("li"));
            if ("" !== e(this).val())if (t.length)t.attr("tooltip", e(this).val()).css("display", "inline-block"); else {
                var l = '<span class="tooltip-element" tooltip="' + e(this).val() + '">?</span>';
                e(".toggle-form", e(this).closest("li")).before(l)
            } else t.length && t.css("display", "none")
        }), o.updateMultipleSelect(), q.delegate('input[name="name"]', "keyup", function () {
            e(this).val(o.safename(e(this).val())), "" === e(this).val() ? e(this).addClass("field_error").attr("placeholder", n.messages.cannotBeEmpty) : e(this).removeClass("field_error")
        }), q.delegate("input.fld-max-length", "keyup", function () {
            e(this).val(o.forceNumber(e(this).val()))
        }), q.delegate(".delete-confirm", "click", function (t) {
            t.preventDefault();
            var l = e("<h3/>").html("<span></span>" + n.messages.warning), a = e(this).attr("id").replace(/del_/, ""), s = e(this), i = e(document.getElementById("frm-" + a + "-item")), r = s.offset().left - e(window).scrollLeft(), d = s.offset().top - e(window).scrollTop();
            n.showWarning ? jQuery("<div />").append(l, n.messages.fieldRemoveWarning).dialog({
                modal: !0,
                resizable: !1,
                width: 300,
                dialogClass: "ite-warning",
                open: function () {
                    e(".ui-widget-overlay").css({opacity: 0})
                },
                position: [r - 282, d - 178],
                buttons: [{
                    text: n.messages.yes, click: function () {
                        i.slideUp(250, function () {
                            e(this).remove(), o.save()
                        }), e(this).dialog("close")
                    }
                }, {
                    text: n.messages.no, "class": "cancel", click: function () {
                        e(this).dialog("close")
                    }
                }]
            }) : i.slideUp(250, function () {
                e(this).remove(), o.save()
            }), 1 === e(".form-field", q).length && L.addClass("empty")
        }), q.delegate("input.required", "click", function () {
            var t = e(this).parents("li.form-field").find(".required-asterisk");
            t.toggle()
        }), q.delegate('input[name="enable_roles"]', "click", function () {
            var t = e(this).siblings("div.available-roles"), l = e(this);
            t.slideToggle(250, function () {
                l.is(":checked") || e('input[type="checkbox"]', t).removeAttr("checked")
            })
        }), q.delegate(".add_ck", "click", function () {
            return e(this).parent().before(j()), !1
        }), q.delegate("li.disabled .form-element", "mouseenter", function () {
            o.disabledTT(e(this))
        }), q.delegate(".add_opt", "click", function (t) {
            t.preventDefault();
            var l = e(this).parents(".fields").first().find('input[name="multiple"]')[0].checked, a = e(this).parents(".fields").find(".select-option:eq(0)").attr("name");
            e(this).parents(".fields").first().find(".sortable-options").append(j(!1, a, !1, l)), o.updateMultipleSelect()
        }), q.delegate(".close_field", "click", function (t) {
            t.preventDefault(), e(this).parents("li.form-field").find(".toggle-form").trigger("click")
        }), q.delegate(".add_rd", "click", function (t) {
            t.preventDefault(), e(this).parent().before(j(!1, e(this).parents(".frm-holder").attr("id")))
        }), e(".form-elements .fields .remove, .frmb .del-button").on("hover", function () {
            e(this).parents("li.form-field").toggleClass("delete")
        }), e(document.getElementById(d + "-export-xml")).click(function (t) {
            t.preventDefault();
            var l = r.val(), a = e("<pre />").text(l);
            a.dialog({resizable: !1, modal: !0, width: 720, dialogClass: "frmb-xml", overlay: {color: "#333333"}})
        }), e(document.getElementById(d + "-clear-all")).click(function (e) {
            if (e.preventDefault(), window.confirm(n.messages.clearAllMessage)) {
                q.empty(), r.val(""), o.save();
                var t = {
                    label: [n.messages.descriptionField],
                    name: ["content"],
                    required: "true",
                    description: n.messages.mandatory
                };
                X(t), q.prepend(n.disableFields.before), q.append(n.disableFields.after)
            }
        }), e(document.getElementById(d + "-save")).click(function (t) {
            0 === e(this).find(".ldkInlineEdit").length && (t.preventDefault(), L.hasClass("edit-xml") || o.save(), o.validateForm(t))
        });
        var z = !1, U = [], H = "68,69,86";
        e(".save.fb-button").mouseover(function () {
            z = !0
        }).mouseout(function () {
            z = !1
        }), e(document.documentElement).keydown(function (t) {
            U.push(t.keyCode), U.toString().indexOf(H) >= 0 && (e(".action-links").toggle(), e(".view-xml").toggle(), U = [])
        }), e(".dev-mode-link").click(function (t) {
            t.preventDefault();
            var l = e(this);
            L.toggleClass("dev-mode"), l.parent().css("opacity", 1), L.hasClass("dev-mode") ? (l.siblings(".action-links-inner").css("width", "100%"), l.html(n.messages.devMode + " " + n.messages.on).css("color", "#8CC63F")) : (l.siblings(".action-links-inner").css("width", 0), l.html(n.messages.devMode + " " + n.messages.off).css("color", "#666666"), z = !1, e(".action-links").toggle(), e(".view-xml").toggle())
        }), e(document.getElementById(d + "-edit-names")).click(function (t) {
            t.preventDefault(), e(this).toggleClass("active"), e(".name-wrap", q).slideToggle(250, function () {
                L.toggleClass("edit-names")
            })
        }), e(document.getElementById(d + "-allow-select")).click(function (t) {
            t.preventDefault(), e(this).toggleClass("active"), e(".allow-multi, .select-option", q).slideToggle(250, function () {
                L.toggleClass("allow-select")
            })
        }), e(document.getElementById(d + "-edit-xml")).click(function (t) {
            t.preventDefault(), e(this).toggleClass("active"), e("textarea.idea-template").show(), e(".template-textarea-wrap").slideToggle(250), L.toggleClass("edit-xml")
        }), r.parent().find('p[id*="ideaTemplate"]').remove(), r.wrap('<div class="template-textarea-wrap"/>'), r.getTemplate()
    };
    e.fn.formBuilder = function (l) {
        var a = this;
        return a.each(function () {
            var a = e(this);
            if (!a.data("formBuilder")) {
                var s = new t(this, l);
                a.data("formBuilder", s)
            }
        })
    }
}(jQuery), function (e) {
    e.fn.toXML = function (t) {
        var l = {prepend: "", attributes: ["class"]}, a = e.extend(l, t), s = "";
        return this.each(function () {
            var t = 0, l = 1;
            e(this).children().length >= 1 && (s += "<form-template>\n	<fields>", e(this).children().each(function () {
                var i = e(this);
                if (!i.hasClass("moving") && !i.hasClass("disabled"))for (var o = 0; o < a.attributes.length; o++) {
                    var n = e("input.required", i).is(":checked") ? 'required="true" ' : 'required="false" ', r = e('input[name="multiple"]', i).is(":checked"), d = r ? 'style="multiple" ' : "", c = i.attr(a.attributes[o]).replace(" form-field", ""), p = c.match(/(select|checkbox-group|radio-group)/), m = 'type="' + c + '" ', u = 'name="' + e("input.fld-name", i).val() + '" ', f = 'label="' + e("input.fld-label", i).val() + '" ', h = e.map(e("input.roles-field:checked", i), function (e) {
                        return e.value
                    }).join(","), v = "" !== h ? 'role="' + h + '" ' : "", g = 'description="' + e("input.fld-description", i).val() + '" ', b = e("input.fld-max-length", i).val(), x = 'max-length="' + (void 0 !== b ? b : "") + '" ', y = p ? "" : "/";
                    s += "\n		<field " + u + f + d + v + g + ("" !== b && void 0 !== b ? x : "") + n + m + y + ">", p && (l = 1, e(".sortable-options li", i).each(function () {
                        var t = e(this), a = 'value="' + e(".option-value", t).val() + '"', i = e(".option-label", t).val(), o = e(".select-option", t).is(":checked") ? ' selected="true"' : "";
                        s += "\n			<option" + o + " " + a + ">" + i + "</option>", l++
                    }), s += "\n		</field>")
                }
                t++
            }), s += "\n	</fields>\n</form-template>")
        }), s
    }
}(jQuery);